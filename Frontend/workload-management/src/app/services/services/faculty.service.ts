/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { FacultyResponse } from '../models/faculty-response';
import { findAllFaculties } from '../fn/faculty/find-all-faculties';
import { FindAllFaculties$Params } from '../fn/faculty/find-all-faculties';
import { findFacultyById } from '../fn/faculty/find-faculty-by-id';
import { FindFacultyById$Params } from '../fn/faculty/find-faculty-by-id';
import { saveFaculty } from '../fn/faculty/save-faculty';
import { SaveFaculty$Params } from '../fn/faculty/save-faculty';
import { updateFaculty } from '../fn/faculty/update-faculty';
import { UpdateFaculty$Params } from '../fn/faculty/update-faculty';

@Injectable({ providedIn: 'root' })
export class FacultyService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllFaculties()` */
  static readonly FindAllFacultiesPath = '/faculty';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllFaculties()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllFaculties$Response(params?: FindAllFaculties$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FacultyResponse>>> {
    return findAllFaculties(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllFaculties$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllFaculties(params?: FindAllFaculties$Params, context?: HttpContext): Observable<Array<FacultyResponse>> {
    return this.findAllFaculties$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FacultyResponse>>): Array<FacultyResponse> => r.body)
    );
  }

  /** Path part for operation `saveFaculty()` */
  static readonly SaveFacultyPath = '/faculty';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveFaculty()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveFaculty$Response(params: SaveFaculty$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveFaculty(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveFaculty$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveFaculty(params: SaveFaculty$Params, context?: HttpContext): Observable<number> {
    return this.saveFaculty$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findFacultyById()` */
  static readonly FindFacultyByIdPath = '/faculty/{facultyId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findFacultyById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findFacultyById$Response(params: FindFacultyById$Params, context?: HttpContext): Observable<StrictHttpResponse<FacultyResponse>> {
    return findFacultyById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findFacultyById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findFacultyById(params: FindFacultyById$Params, context?: HttpContext): Observable<FacultyResponse> {
    return this.findFacultyById$Response(params, context).pipe(
      map((r: StrictHttpResponse<FacultyResponse>): FacultyResponse => r.body)
    );
  }

  /** Path part for operation `updateFaculty()` */
  static readonly UpdateFacultyPath = '/faculty/{facultyId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateFaculty()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFaculty$Response(params: UpdateFaculty$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateFaculty(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateFaculty$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFaculty(params: UpdateFaculty$Params, context?: HttpContext): Observable<number> {
    return this.updateFaculty$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

}
