/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { findAllSemesters } from '../fn/semester-controller/find-all-semesters';
import { FindAllSemesters$Params } from '../fn/semester-controller/find-all-semesters';
import { findSemesterById } from '../fn/semester-controller/find-semester-by-id';
import { FindSemesterById$Params } from '../fn/semester-controller/find-semester-by-id';
import { saveSemester } from '../fn/semester-controller/save-semester';
import { SaveSemester$Params } from '../fn/semester-controller/save-semester';
import { SemesterResponse } from '../models/semester-response';

@Injectable({ providedIn: 'root' })
export class SemesterControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllSemesters()` */
  static readonly FindAllSemestersPath = '/statuses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllSemesters()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllSemesters$Response(params?: FindAllSemesters$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SemesterResponse>>> {
    return findAllSemesters(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllSemesters$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllSemesters(params?: FindAllSemesters$Params, context?: HttpContext): Observable<Array<SemesterResponse>> {
    return this.findAllSemesters$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SemesterResponse>>): Array<SemesterResponse> => r.body)
    );
  }

  /** Path part for operation `saveSemester()` */
  static readonly SaveSemesterPath = '/statuses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveSemester()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveSemester$Response(params: SaveSemester$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveSemester(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveSemester$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveSemester(params: SaveSemester$Params, context?: HttpContext): Observable<number> {
    return this.saveSemester$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findSemesterById()` */
  static readonly FindSemesterByIdPath = '/statuses/{statusTypeId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findSemesterById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findSemesterById$Response(params: FindSemesterById$Params, context?: HttpContext): Observable<StrictHttpResponse<SemesterResponse>> {
    return findSemesterById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findSemesterById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findSemesterById(params: FindSemesterById$Params, context?: HttpContext): Observable<SemesterResponse> {
    return this.findSemesterById$Response(params, context).pipe(
      map((r: StrictHttpResponse<SemesterResponse>): SemesterResponse => r.body)
    );
  }

}
