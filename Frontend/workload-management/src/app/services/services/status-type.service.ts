/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { findAllStatusTypes } from '../fn/status-type/find-all-status-types';
import { FindAllStatusTypes$Params } from '../fn/status-type/find-all-status-types';
import { findStatusTypeById } from '../fn/status-type/find-status-type-by-id';
import { FindStatusTypeById$Params } from '../fn/status-type/find-status-type-by-id';
import { saveStatusType } from '../fn/status-type/save-status-type';
import { SaveStatusType$Params } from '../fn/status-type/save-status-type';
import { StatusTypeResponse } from '../models/status-type-response';
import { updateStatusTypeById } from '../fn/status-type/update-status-type-by-id';
import { UpdateStatusTypeById$Params } from '../fn/status-type/update-status-type-by-id';

@Injectable({ providedIn: 'root' })
export class StatusTypeService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllStatusTypes()` */
  static readonly FindAllStatusTypesPath = '/status-type';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllStatusTypes()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllStatusTypes$Response(params?: FindAllStatusTypes$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<StatusTypeResponse>>> {
    return findAllStatusTypes(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllStatusTypes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllStatusTypes(params?: FindAllStatusTypes$Params, context?: HttpContext): Observable<Array<StatusTypeResponse>> {
    return this.findAllStatusTypes$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<StatusTypeResponse>>): Array<StatusTypeResponse> => r.body)
    );
  }

  /** Path part for operation `saveStatusType()` */
  static readonly SaveStatusTypePath = '/status-type';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveStatusType()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveStatusType$Response(params: SaveStatusType$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveStatusType(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveStatusType$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveStatusType(params: SaveStatusType$Params, context?: HttpContext): Observable<number> {
    return this.saveStatusType$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findStatusTypeById()` */
  static readonly FindStatusTypeByIdPath = '/status-type/{statusTypeId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findStatusTypeById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findStatusTypeById$Response(params: FindStatusTypeById$Params, context?: HttpContext): Observable<StrictHttpResponse<StatusTypeResponse>> {
    return findStatusTypeById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findStatusTypeById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findStatusTypeById(params: FindStatusTypeById$Params, context?: HttpContext): Observable<StatusTypeResponse> {
    return this.findStatusTypeById$Response(params, context).pipe(
      map((r: StrictHttpResponse<StatusTypeResponse>): StatusTypeResponse => r.body)
    );
  }

  /** Path part for operation `updateStatusTypeById()` */
  static readonly UpdateStatusTypeByIdPath = '/status-type/{statusTypeId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateStatusTypeById()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStatusTypeById$Response(params: UpdateStatusTypeById$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateStatusTypeById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateStatusTypeById$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStatusTypeById(params: UpdateStatusTypeById$Params, context?: HttpContext): Observable<number> {
    return this.updateStatusTypeById$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

}
